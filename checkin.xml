<agendas>
  <agenda> <!--Check-in: rules to validate Item; barcode check; checks based on item status (in transit; intransit for hold; intransit for staff request) and setting new status; checks for requests against the item and setting new statuses; Contains sub rules for check in policies based on combined characteristics of item and patron; Policies set "lost" and overdue penalties-->
    <name>Check-in Validation</name>
    <rules>
      <rule> <!--InTransitCheck; if containsFunction(itemlocation, operatorsCirculationLocation), then (if itemstatus in (intransit), then itemstatus = AVAILABLE, else (if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else updateItemStatus = Available)), else updateItemStatus = INTRANSIT-->
        <name>InTransitCheck</name>
        <oleProposition> <!--if containsFunction(itemlocation, operatorsCirculationLocation)-->
          <type>simple</type>
          <simpleProposition>
            <function>containsFunction</function>
            <term>
              <type>java.lang.String</type>
              <value>itemLocation</value>
            </term>
            <term>
              <type>java.lang.String</type>
              <value>operatorsCirculationLocation</value>
            </term>
          </simpleProposition>
        </oleProposition>
        <trueActions> <!--then (run rule Recently returned Check based on inTransit: if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else  updateItemStatus = Available)-->
          <rule> <!--Recently returned Check based on inTransit: if shelvingLagTime > 0, then updateItemStatus=Recently-Returned, Else updateItemStatus = Available-->
            <name>Recently returned Check based on inTransit</name>
            <oleProposition> <!--if shelvingLagTime > 0-->
              <type>simple</type>
              <simpleProposition>
                <term>
                  <type>java.lang.Integer</type>
                  <value>shelvingLagTime</value>
                </term>
                <operator>greaterThan</operator>
                <values>
                  <value>
                    <type>java.lang.Integer</type>
                    <name>0</name>
                  </value>
                </values>
              </simpleProposition>
            </oleProposition>
            <trueActions> <!--then updateItemStatus=Recently-Returned-->
              <action>
                <name>updateItemStatus</name>
                <parameter>
                  <name>updateItemStatus</name>
                  <value>RECENTLY-RETURNED</value>
                </parameter>
              </action>
            </trueActions>
            <falseActions> <!--else updateItemStatus = Available-->
              <action>
                <name>updateItemStatus</name>
                <parameter>
                  <name>updateItemStatus</name>
                  <value>AVAILABLE</value>
                </parameter>
              </action>
            </falseActions>
          </rule>
        </trueActions>
        <falseActions> <!--else updateItemStatus = INTRANSIT-->
          <action>
            <name>updateItemStatus</name>
            <parameter>
              <name>updateItemStatus</name>
              <value>INTRANSIT</value>
            </parameter>
          </action>
        </falseActions>
      </rule>
      
      
      <!--[FACULTY OR STAFF], Item Type: [01, 03] -->
      <rule>
        <name>CHECKIN_FAC_STAFF_01_03</name>
        <oleProposition> <!--check borrowerType, itemType, and itemLibrary-->
          <type>compound</type>
          <compoundProposition>
            <operator>AND</operator>
            <simpleProposition> <!--if borrower in (FAC, STAFF)-->
              <term>
                <type>java.lang.String</type>
                <value>borrowerType</value>
              </term>
              <operator>IN</operator>
              <values>
                <value>
                  <type>java.lang.String</type>
                  <name>FAC</name>
                </value>
                <value>
                  <type>java.lang.String</type>
                  <name>STAFF</name>
                </value>
              </values>
            </simpleProposition>
            <simpleProposition> <!--If item in (01, 03)-->
              <term>
                <type>java.lang.String</type>
                <value>itemType</value>
              </term>
              <operator>IN</operator>
              <values>
                <value>
                  <type>java.lang.String</type>
                  <name>01</name>
                </value>
                <value>
                  <type>java.lang.String</type>
                  <name>03</name>
                </value>
              </values>
            </simpleProposition>
          </compoundProposition>
        </oleProposition>
        <trueActions>
          <action> <!--then circulationPolicyFound = true-->
            <name>circulationPolicyFound</name>
            <parameter>
              <name>circulationPolicyFound</name>
              <value>true</value>
            </parameter>
          </action>
          <!-- No fines, so do nothing -->
        </trueActions>
      </rule>
      
      
      <!--[UGRAD OR GRAD], Item Type: [01, 03] -->
      <rule>
        <name>CHECKIN_UGRAD_GRAD_01_03</name>
        <oleProposition> <!--check borrowerType, itemType, and itemLibrary-->
          <type>compound</type>
          <compoundProposition>
            <operator>AND</operator>
            <simpleProposition> <!--if borrower in (UGRAD, GRAD)-->
              <term>
                <type>java.lang.String</type>
                <value>borrowerType</value>
              </term>
              <operator>IN</operator>
              <values>
                <value>
                  <type>java.lang.String</type>
                  <name>UGRAD</name>
                </value>
                <value>
                  <type>java.lang.String</type>
                  <name>STAFF</name>
                </value>
              </values>
            </simpleProposition>
            <simpleProposition> <!--If item in (01, 03)-->
              <term>
                <type>java.lang.String</type>
                <value>itemType</value>
              </term>
              <operator>IN</operator>
              <values>
                <value>
                  <type>java.lang.String</type>
                  <name>01</name>
                </value>
                <value>
                  <type>java.lang.String</type>
                  <name>03</name>
                </value>
              </values>
            </simpleProposition>
          </compoundProposition>
        </oleProposition>
        <trueActions>
          <action> <!--then circulationPolicyFound = true-->
            <name>circulationPolicyFound</name>
            <parameter>
              <name>circulationPolicyFound</name>
              <value>true</value>
            </parameter>
          </action>
          <rule>
            <name>OverdueFineCalculation</name>
            <oleProposition> <!--if today (I think) =itemDueDate-->
              <type>compound</type>
              <compoundProposition>
                <operator>AND</operator>
                <simpleProposition>
                  <function>currentDateFunction</function>
                  <term>
                    <type>java.util.Date</type>
                    <value>itemDueDate</value>
                  </term>
                </simpleProposition>
                <simpleProposition>
                  <term>
                    <type>java.lang.boolean</type>
                    <value>claimsReturnedFlag</value>
                  </term>
                  <operator>=</operator>
                  <values>
                    <value>
                      <type>java.lang.boolean</type>
                      <name>false</name>
                    </value>
                  </values>
                </simpleProposition>
              </compoundProposition>
            </oleProposition>
            <trueActions>
              <action> <!--overduefine=50 cents/D-->
                <name>overdueFine</name>
                <parameter>
                  <name>overdueFine</name>
                  <value>0.50/D</value>
                </parameter>
              </action>
              <action> <!--MaxFine=100 dollars-->
                <name>maxFine</name>
                <parameter>
                  <name>maxFine</name>
                  <value>100</value>
                </parameter>
              </action>
            </trueActions>
          </rule>
        </trueActions>
      </rule>
      
      <!--Item Type: [65] -->
      <rule>
        <name>CHECKIN_ALL_65</name>
        <oleProposition> <!--check borrowerType, itemType, and itemLibrary-->
          <type>simple</type>
          <simpleProposition> <!--If item in (65)-->
            <term>
              <type>java.lang.String</type>
              <value>itemType</value>
            </term>
            <operator>IN</operator>
            <values>
              <value>
                <type>java.lang.String</type>
                <name>65</name>
              </value>
            </values>
          </simpleProposition>
        </oleProposition>
        <trueActions>
          <action> <!--then circulationPolicyFound = true-->
            <name>circulationPolicyFound</name>
            <parameter>
              <name>circulationPolicyFound</name>
              <value>true</value>
            </parameter>
          </action>
          <rule>
            <name>OverdueFineCalculation</name>
            <oleProposition> <!--if today (I think) =itemDueDate-->
              <type>compound</type>
              <compoundProposition>
                <operator>AND</operator>
                <simpleProposition>
                  <function>currentDateFunction</function>
                  <term>
                    <type>java.util.Date</type>
                    <value>itemDueDate</value>
                  </term>
                </simpleProposition>
                <simpleProposition>
                  <term>
                    <type>java.lang.boolean</type>
                    <value>claimsReturnedFlag</value>
                  </term>
                  <operator>=</operator>
                  <values>
                    <value>
                      <type>java.lang.boolean</type>
                      <name>false</name>
                    </value>
                  </values>
                </simpleProposition>
              </compoundProposition>
            </oleProposition>
            <trueActions>
              <action> <!--overduefine=$1/H-->
                <name>overdueFine</name>
                <parameter>
                  <name>overdueFine</name>
                  <value>1.00/H</value>
                </parameter>
              </action>
              <action> <!--MaxFine=100 dollars-->
                <name>maxFine</name>
                <parameter>
                  <name>maxFine</name>
                  <value>100</value>
                </parameter>
              </action>
            </trueActions>
          </rule>
        </trueActions>
      </rule>


    
      <!--Checkin Policy not found; if isCircPolicyNotFound, then send a message-->
      <rule>
        <name>Check in Circulation Policy Not Found</name>
        <oleProposition>
          <type>simple</type>
          <simpleProposition>
            <function>circulationPolicyFoundFunction</function>
            <term>
              <type>java.lang.String</type>
              <value>patronId</value>
            </term>
            <term>
              <type>java.lang.String</type>
              <value>itemId</value>
            </term>
          </simpleProposition>
        </oleProposition>
        <trueActions>
          <action>
            <name>errorAction</name>
            <parameter>
              <name>errorMessage</name>
              <value>There is no circulation rule for this combination.</value>
            </parameter>
          </action>
        </trueActions>
      </rule>
    </rules>
  </agenda>
</agendas>